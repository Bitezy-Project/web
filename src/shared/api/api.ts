/**
 * Generated by orval v7.4.0 🍺
 * Do not edit manually.
 * template
 * OpenAPI spec version: 1.0.0
 */
/**
 * A generic object containing the payload data.
 * @nullable
 */
export type PostAuthGoogleUserLoginDefaultPayload = { [key: string]: unknown } | null;

export type PostAuthGoogleUserLoginDefault = {
  /**
   * A generic object containing the payload data.
   * @nullable
   */
  payload?: PostAuthGoogleUserLoginDefaultPayload;
  /** The status of the response. */
  status?: string;
  /**
   * An optional message accompanying the response.
   * @nullable
   */
  message?: string | null;
  /** Indicates whether the operation was completed. */
  completed?: boolean;
};

export type PostAuthGoogleUserLogin200Payload = { [key: string]: unknown };

export type PostAuthGoogleUserLogin200 = {
  payload: PostAuthGoogleUserLogin200Payload;
  message: string;
  status: string;
  completed?: boolean;
};

export type PostAuthGoogleUserLoginBody = {
  /** @minLength 1 */
  gToken: string;
};

/**
 * A generic object containing the payload data.
 * @nullable
 */
export type PostAuthGoogleUserDefaultPayload = { [key: string]: unknown } | null;

export type PostAuthGoogleUserDefault = {
  /**
   * A generic object containing the payload data.
   * @nullable
   */
  payload?: PostAuthGoogleUserDefaultPayload;
  /** The status of the response. */
  status?: string;
  /**
   * An optional message accompanying the response.
   * @nullable
   */
  message?: string | null;
  /** Indicates whether the operation was completed. */
  completed?: boolean;
};

export type PostAuthGoogleUser200Payload = { [key: string]: unknown };

export type PostAuthGoogleUser200 = {
  payload: PostAuthGoogleUser200Payload;
  message: string;
  status: string;
  completed?: boolean;
};

export type PostAuthGoogleUserBody = {
  /** @minLength 1 */
  gToken: string;
};

/**
 * A generic object containing the payload data.
 * @nullable
 */
export type PostAuthUserLoginDefaultPayload = { [key: string]: unknown } | null;

export type PostAuthUserLoginDefault = {
  /**
   * A generic object containing the payload data.
   * @nullable
   */
  payload?: PostAuthUserLoginDefaultPayload;
  /** The status of the response. */
  status?: string;
  /**
   * An optional message accompanying the response.
   * @nullable
   */
  message?: string | null;
  /** Indicates whether the operation was completed. */
  completed?: boolean;
};

export type PostAuthUserLogin200Payload = { [key: string]: unknown };

export type PostAuthUserLogin200 = {
  payload: PostAuthUserLogin200Payload;
  message: string;
  status: string;
  completed?: boolean;
};

export type PostAuthUserLoginBody = {
  /** @minLength 1 */
  email: string;
  /**
   * @minLength 8
   * @pattern ^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
   */
  password: string;
};

/**
 * A generic object containing the payload data.
 * @nullable
 */
export type PostAuthUserDefaultPayload = { [key: string]: unknown } | null;

export type PostAuthUserDefault = {
  /**
   * A generic object containing the payload data.
   * @nullable
   */
  payload?: PostAuthUserDefaultPayload;
  /** The status of the response. */
  status?: string;
  /**
   * An optional message accompanying the response.
   * @nullable
   */
  message?: string | null;
  /** Indicates whether the operation was completed. */
  completed?: boolean;
};

export type PostAuthUser200Payload = { [key: string]: unknown };

export type PostAuthUser200 = {
  payload: PostAuthUser200Payload;
  message: string;
  status: string;
  completed?: boolean;
};

export type PostAuthUserBody = {
  /** @minLength 1 */
  name: string;
  email: string;
  /**
   * @minLength 8
   * @pattern ^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$
   */
  password: string;
  avatarUrl?: string;
};

/**
 * A generic object containing the payload data.
 * @nullable
 */
export type PutAuthUserVerificationCodeDefaultPayload = { [key: string]: unknown } | null;

export type PutAuthUserVerificationCodeDefault = {
  /**
   * A generic object containing the payload data.
   * @nullable
   */
  payload?: PutAuthUserVerificationCodeDefaultPayload;
  /** The status of the response. */
  status?: string;
  /**
   * An optional message accompanying the response.
   * @nullable
   */
  message?: string | null;
  /** Indicates whether the operation was completed. */
  completed?: boolean;
};

export type PutAuthUserVerificationCode200Payload = { [key: string]: unknown };

export type PutAuthUserVerificationCode200 = {
  payload: PutAuthUserVerificationCode200Payload;
  message: string;
  status: string;
  completed?: boolean;
};

export type PutAuthUserVerificationCodeBody = {
  /** @minLength 0 */
  email: string;
};

/**
 * A generic object containing the payload data.
 * @nullable
 */
export type PutAuthUserVerificationDefaultPayload = { [key: string]: unknown } | null;

export type PutAuthUserVerificationDefault = {
  /**
   * A generic object containing the payload data.
   * @nullable
   */
  payload?: PutAuthUserVerificationDefaultPayload;
  /** The status of the response. */
  status?: string;
  /**
   * An optional message accompanying the response.
   * @nullable
   */
  message?: string | null;
  /** Indicates whether the operation was completed. */
  completed?: boolean;
};

export type PutAuthUserVerification200Payload = { [key: string]: unknown };

export type PutAuthUserVerification200 = {
  payload: PutAuthUserVerification200Payload;
  message: string;
  status: string;
  completed?: boolean;
};

export type PutAuthUserVerificationBody = {
  /** @minLength 1 */
  email: string;
  /**
   * @minLength 6
   * @maxLength 6
   */
  code: string;
};



/**
 * @summary VerifyUserController HTTP Endpoint
 */
export type putAuthUserVerificationResponse = {
  data: PutAuthUserVerification200 | PutAuthUserVerificationDefault;
  status: number;
  headers: Headers;
}

export const getPutAuthUserVerificationUrl = () => {


  return `/auth/user/verification`
}

export const putAuthUserVerification = async (putAuthUserVerificationBody: PutAuthUserVerificationBody, options?: RequestInit): Promise<putAuthUserVerificationResponse> => {
  
  const res = await fetch(getPutAuthUserVerificationUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putAuthUserVerificationBody,)
  }
)

  const data:PutAuthUserVerification200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary ResendVerificationCodeController HTTP Endpoint
 */
export type putAuthUserVerificationCodeResponse = {
  data: PutAuthUserVerificationCode200 | PutAuthUserVerificationCodeDefault;
  status: number;
  headers: Headers;
}

export const getPutAuthUserVerificationCodeUrl = () => {


  return `/auth/user/verification/code`
}

export const putAuthUserVerificationCode = async (putAuthUserVerificationCodeBody: PutAuthUserVerificationCodeBody, options?: RequestInit): Promise<putAuthUserVerificationCodeResponse> => {
  
  const res = await fetch(getPutAuthUserVerificationCodeUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      putAuthUserVerificationCodeBody,)
  }
)

  const data:PutAuthUserVerificationCode200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary RegisterController HTTP Endpoint
 */
export type postAuthUserResponse = {
  data: PostAuthUser200 | PostAuthUserDefault;
  status: number;
  headers: Headers;
}

export const getPostAuthUserUrl = () => {


  return `/auth/user`
}

export const postAuthUser = async (postAuthUserBody: PostAuthUserBody, options?: RequestInit): Promise<postAuthUserResponse> => {
  
  const res = await fetch(getPostAuthUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAuthUserBody,)
  }
)

  const data:PostAuthUser200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary LoginController HTTP Endpoint
 */
export type postAuthUserLoginResponse = {
  data: PostAuthUserLogin200 | PostAuthUserLoginDefault;
  status: number;
  headers: Headers;
}

export const getPostAuthUserLoginUrl = () => {


  return `/auth/user/login`
}

export const postAuthUserLogin = async (postAuthUserLoginBody: PostAuthUserLoginBody, options?: RequestInit): Promise<postAuthUserLoginResponse> => {
  
  const res = await fetch(getPostAuthUserLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAuthUserLoginBody,)
  }
)

  const data:PostAuthUserLogin200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary GoogleRegisterController HTTP Endpoint
 */
export type postAuthGoogleUserResponse = {
  data: PostAuthGoogleUser200 | PostAuthGoogleUserDefault;
  status: number;
  headers: Headers;
}

export const getPostAuthGoogleUserUrl = () => {


  return `/auth/google/user`
}

export const postAuthGoogleUser = async (postAuthGoogleUserBody: PostAuthGoogleUserBody, options?: RequestInit): Promise<postAuthGoogleUserResponse> => {
  
  const res = await fetch(getPostAuthGoogleUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAuthGoogleUserBody,)
  }
)

  const data:PostAuthGoogleUser200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



/**
 * @summary GoogleLoginController HTTP Endpoint
 */
export type postAuthGoogleUserLoginResponse = {
  data: PostAuthGoogleUserLogin200 | PostAuthGoogleUserLoginDefault;
  status: number;
  headers: Headers;
}

export const getPostAuthGoogleUserLoginUrl = () => {


  return `/auth/google/user/login`
}

export const postAuthGoogleUserLogin = async (postAuthGoogleUserLoginBody: PostAuthGoogleUserLoginBody, options?: RequestInit): Promise<postAuthGoogleUserLoginResponse> => {
  
  const res = await fetch(getPostAuthGoogleUserLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      postAuthGoogleUserLoginBody,)
  }
)

  const data:PostAuthGoogleUserLogin200 = ([204, 205, 304].includes(res.status) || !res.body) ? {} : await res.json()

  return { status: res.status, data, headers: res.headers }
}



